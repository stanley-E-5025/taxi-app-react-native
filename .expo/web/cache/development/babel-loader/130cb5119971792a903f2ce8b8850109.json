{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGooglePlacesAutocomplete = require(\"react-native-google-places-autocomplete\");\n\nvar _native = require(\"@react-navigation/native\");\n\nvar _styles = _interopRequireDefault(require(\"./styles.js\"));\n\nvar _PlaceRow = _interopRequireDefault(require(\"./PlaceRow\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Stanley\\\\Desktop\\\\AwesomeProject\\\\src\\\\screens\\\\p2\\\\index.js\";\n\nnavigator.geolocation = require('@react-native-community/geolocation');\nnavigator.geolocation = require('react-native-geolocation-service');\nvar homePlace = {\n  description: 'Home',\n  geometry: {\n    location: {\n      lat: 48.8152937,\n      lng: 2.4597668\n    }\n  }\n};\nvar workPlace = {\n  description: 'Work',\n  geometry: {\n    location: {\n      lat: 48.8496818,\n      lng: 2.2940881\n    }\n  }\n};\n\nvar DestinationSearch = function DestinationSearch(props) {\n  var _useState = (0, _react.useState)(null),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      originPlace = _useState2[0],\n      setOriginPlace = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      destinationPlace = _useState4[0],\n      setDestinationPlace = _useState4[1];\n\n  var navigation = (0, _native.useNavigation)();\n\n  var checkNavigation = function checkNavigation() {\n    if (originPlace && destinationPlace) {\n      navigation.navigate('p4', {\n        originPlace: originPlace,\n        destinationPlace: destinationPlace\n      });\n    }\n  };\n\n  (0, _react.useEffect)(function () {\n    checkNavigation();\n  }, [originPlace, destinationPlace]);\n  return _react.default.createElement(_reactNative.SafeAreaView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: _styles.default.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, _react.default.createElement(_reactNativeGooglePlacesAutocomplete.GooglePlacesAutocomplete, {\n    placeholder: \"Where from?\",\n    onPress: function onPress(data) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      setOriginPlace({\n        data: data,\n        details: details\n      });\n    },\n    enablePoweredByContainer: false,\n    suppressDefaultStyles: true,\n    currentLocation: true,\n    currentLocationLabel: \"Current location\",\n    styles: {\n      textInput: _styles.default.textInput,\n      container: _styles.default.autocompleteContainer,\n      listView: _styles.default.listView,\n      separator: _styles.default.separator\n    },\n    fetchDetails: true,\n    query: {\n      key: 'AIzaSyDC5YeK0OuXzBkkpcdYF71wTjtIGVV4NgE',\n      language: 'en'\n    },\n    renderRow: function renderRow(data) {\n      return _react.default.createElement(_PlaceRow.default, {\n        data: data,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 32\n        }\n      });\n    },\n    renderDescription: function renderDescription(data) {\n      return data.description || data.vicinity;\n    },\n    predefinedPlaces: [homePlace, workPlace],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNativeGooglePlacesAutocomplete.GooglePlacesAutocomplete, {\n    placeholder: \"Where to?\",\n    onPress: function onPress(data) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      setDestinationPlace({\n        data: data,\n        details: details\n      });\n    },\n    enablePoweredByContainer: false,\n    suppressDefaultStyles: true,\n    styles: {\n      textInput: _styles.default.textInput,\n      container: (0, _extends2.default)({}, _styles.default.autocompleteContainer, {\n        top: 55\n      }),\n      separator: _styles.default.separator\n    },\n    fetchDetails: true,\n    query: {\n      key: 'AIzaSyDC5YeK0OuXzBkkpcdYF71wTjtIGVV4NgE',\n      language: 'en'\n    },\n    renderRow: function renderRow(data) {\n      return _react.default.createElement(_PlaceRow.default, {\n        data: data,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 32\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: _styles.default.circle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: _styles.default.line,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }), _react.default.createElement(_reactNative.View, {\n    style: _styles.default.square,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  })));\n};\n\nvar _default = DestinationSearch;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/Stanley/Desktop/AwesomeProject/src/screens/p2/index.js"],"names":["navigator","geolocation","require","homePlace","description","geometry","location","lat","lng","workPlace","DestinationSearch","props","originPlace","setOriginPlace","destinationPlace","setDestinationPlace","navigation","checkNavigation","navigate","styles","container","data","details","textInput","autocompleteContainer","listView","separator","key","language","vicinity","top","circle","line","square"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {View, TextInput, SafeAreaView} from 'react-native';\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\r\nimport { useNavigation } from '@react-navigation/native';\r\nnavigator.geolocation = require('@react-native-community/geolocation');\r\n  navigator.geolocation = require('react-native-geolocation-service');\r\n\r\n\r\nimport styles from './styles.js';\r\nimport PlaceRow from \"./PlaceRow\";\r\n\r\nconst homePlace = {\r\n  description: 'Home',\r\n  geometry: { location: { lat: 48.8152937, lng: 2.4597668 } },\r\n};\r\nconst workPlace = {\r\n  description: 'Work',\r\n  geometry: { location: { lat: 48.8496818, lng: 2.2940881 } },\r\n};\r\n\r\nconst DestinationSearch = (props) => {\r\n  const [originPlace, setOriginPlace] = useState(null);\r\n  const [destinationPlace, setDestinationPlace] = useState(null);\r\n\r\n  const navigation = useNavigation();\r\n\r\n  const checkNavigation = () => {\r\n    if (originPlace && destinationPlace) {\r\n      navigation.navigate('p4', {\r\n        originPlace,\r\n        destinationPlace,\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkNavigation();\r\n  }, [originPlace, destinationPlace]);\r\n\r\n  return (\r\n    <SafeAreaView>\r\n      <View style={styles.container}>\r\n\r\n        <GooglePlacesAutocomplete\r\n          placeholder=\"Where from?\"\r\n          onPress={(data, details = null) => {\r\n            setOriginPlace({data, details});\r\n          }}\r\n          enablePoweredByContainer={false}\r\n          suppressDefaultStyles\r\n          currentLocation={true}\r\n          currentLocationLabel='Current location'\r\n          styles={{\r\n            textInput: styles.textInput,\r\n            container: styles.autocompleteContainer,\r\n            listView: styles.listView,\r\n            separator: styles.separator,\r\n          }}\r\n          fetchDetails\r\n          query={{\r\n            key: 'AIzaSyDC5YeK0OuXzBkkpcdYF71wTjtIGVV4NgE',\r\n            language: 'en',\r\n          }}\r\n          renderRow={(data) => <PlaceRow data={data} />}\r\n          renderDescription={(data) => data.description || data.vicinity}\r\n          predefinedPlaces={[homePlace, workPlace]}\r\n        />\r\n\r\n        <GooglePlacesAutocomplete\r\n          placeholder=\"Where to?\"\r\n          onPress={(data, details = null) => {\r\n            setDestinationPlace({data, details});\r\n          }}\r\n          enablePoweredByContainer={false}\r\n          suppressDefaultStyles\r\n          styles={{\r\n            textInput: styles.textInput,\r\n            container: {\r\n              ...styles.autocompleteContainer,\r\n              top: 55,\r\n            },\r\n            separator: styles.separator,\r\n          }}\r\n          fetchDetails\r\n          query={{\r\n            key: 'AIzaSyDC5YeK0OuXzBkkpcdYF71wTjtIGVV4NgE',\r\n            language: 'en',\r\n          }}\r\n          renderRow={(data) => <PlaceRow data={data} />}\r\n        />\r\n\r\n        {/* Circle near Origin input */}\r\n        <View style={styles.circle} />\r\n\r\n        {/* Line between dots */}\r\n        <View style={styles.line} />\r\n\r\n        {/* Square near Destination input */}\r\n        <View style={styles.square} />\r\n\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nexport default DestinationSearch;\r\n"]},"metadata":{},"sourceType":"script"}