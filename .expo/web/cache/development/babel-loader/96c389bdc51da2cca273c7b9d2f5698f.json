{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar nativeInterface_1 = require(\"./lib/nativeInterface\");\n\nvar subscriptions_1 = require(\"./lib/subscriptions\");\n\nvar permissions_1 = require(\"./lib/permissions\");\n\nvar utils_1 = require(\"./utils\");\n\nvar _a = nativeInterface_1.default.get(),\n    nativeInterface = _a.nativeInterface,\n    eventEmitter = _a.eventEmitter;\n\nvar subscriptions;\nvar permissions;\n\nexports._configureHelpers = function (ni, evt) {\n  nativeInterface = ni;\n  eventEmitter = evt;\n  subscriptions = new subscriptions_1.default(nativeInterface, eventEmitter);\n  permissions = new permissions_1.default(nativeInterface, eventEmitter);\n  eventEmitter.addListener(\"onWarning\", function (opts) {\n    console.warn(\"react-native-location warning:\", opts);\n  });\n};\n\nexports._configureHelpers(nativeInterface, eventEmitter);\n\nexports.configure = function (options) {\n  return nativeInterface.configure(options);\n};\n\nexports.requestPermission = function (options) {\n  return permissions.requestPermission(options);\n};\n\nexports.getCurrentPermission = function () {\n  return permissions.getCurrentPermission();\n};\n\nexports.checkPermission = function (options) {\n  return permissions.checkPermission(options);\n};\n\nexports.subscribeToPermissionUpdates = function (listener) {\n  return permissions.subscribeToPermissionUpdates(listener);\n};\n\nexports.subscribeToLocationUpdates = function (listener) {\n  return subscriptions.subscribeToLocationUpdates(listener);\n};\n\nexports.getLatestLocation = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var locationPromise = new Promise(function (resolve) {\n    var unsubscribe = subscriptions.subscribeToLocationUpdates(function (locations) {\n      if (locations.length === 0) {\n        return;\n      }\n\n      var sortedLocations = locations.sort(function (a, b) {\n        return b.timestamp - a.timestamp;\n      });\n\n      if (unsubscribe) {\n        unsubscribe();\n      }\n\n      resolve(sortedLocations[0]);\n    });\n  });\n\n  if (options.timeout === null) {\n    return locationPromise;\n  }\n\n  var timeout = options.timeout || 10000;\n  return utils_1.promiseTimeoutResolveNull(timeout, locationPromise);\n};\n\nexports.subscribeToHeadingUpdates = function (listener) {\n  return subscriptions.subscribeToHeadingUpdates(listener);\n};\n\nexports.subscribeToSignificantLocationUpdates = function (listener) {\n  return subscriptions.subscribeToSignificantLocationUpdates(listener);\n};\n\nexports.default = {\n  configure: exports.configure,\n  requestPermission: exports.requestPermission,\n  checkPermission: exports.checkPermission,\n  getCurrentPermission: exports.getCurrentPermission,\n  subscribeToPermissionUpdates: exports.subscribeToPermissionUpdates,\n  subscribeToLocationUpdates: exports.subscribeToLocationUpdates,\n  getLatestLocation: exports.getLatestLocation,\n  subscribeToHeadingUpdates: exports.subscribeToHeadingUpdates,\n  subscribeToSignificantLocationUpdates: exports.subscribeToSignificantLocationUpdates,\n  _configureHelpers: exports._configureHelpers,\n  _nativeInterface: nativeInterface,\n  _eventEmitter: eventEmitter\n};","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar nativeInterface_1 = require(\"./lib/nativeInterface\");\nvar subscriptions_1 = require(\"./lib/subscriptions\");\nvar permissions_1 = require(\"./lib/permissions\");\nvar utils_1 = require(\"./utils\");\nvar _a = nativeInterface_1.default.get(), \n/**\n * @ignore\n */\nnativeInterface = _a.nativeInterface, \n/**\n * @ignore\n */\neventEmitter = _a.eventEmitter;\n/**\n * The subscription helper. Only for internal use.\n * @ignore\n */\nvar subscriptions;\n/**\n * The permissions helper. Only for internal use.\n * @ignore\n */\nvar permissions;\n/**\n * Internal method to configure the helps. Useful for Jet testing.\n *\n * @ignore\n * @param {RNLocationNativeInterface} ni Native interface\n * @param {EventEmitter} evt Event emitter\n * @returns {void}\n */\nexports._configureHelpers = function (ni, evt) {\n    nativeInterface = ni;\n    eventEmitter = evt;\n    subscriptions = new subscriptions_1.default(nativeInterface, eventEmitter);\n    permissions = new permissions_1.default(nativeInterface, eventEmitter);\n    eventEmitter.addListener(\"onWarning\", function (opts) {\n        console.warn(\"react-native-location warning:\", opts);\n    });\n};\nexports._configureHelpers(nativeInterface, eventEmitter);\n/**\n * This is used to configure the location provider. You can use this to enable background mode, filter location updates to a certain distance change, and ensure you have the power settings set correctly for your use case.\n *\n * You can call `configure` multiple times at it will only change the setting which you pass to it. For example, if you only want to change `activityType`, you can call `configure` with just that property present.\n *\n * @param {ConfigureOptions} options The configuration options.\n * @returns {Promise<void>} A Promise which resolves when the configuration is completed.\n */\nexports.configure = function (options) {\n    return nativeInterface.configure(options);\n};\n/**\n * Correctly managing permissions is key to working with the users location in mobile apps.\n *\n * * Ask for the lowest level of permissions you can. You'll almost always only need `whenInUse` (foreground) permission rather than background.\n * * On iOS you only get one chance to ask for permission. If the user requests it the first time this method will always resolves to `false`.\n * * If you ask for `always` permission then the user gets the chance to accept, but only give you `whenInUse` permission. The Promise will still resolve to `false`, however, if you call `RNLocation.getCurrentPermission` you can check if they actually accepted the lesser permission.\n * * You should monitor the permissions and respond to it correctly. The user is able to go to their phone setting and revoke or downgrade permissions at any time.\n *\n * This method should be called before subscribing to location updates. You need to pass in the type of permission you want for each platform. You can choose not to ignore a platform and it will be ignored. The method returns a promise which resolves to `true` if the permission was granted and `false` if not.\n *\n * @param {RequestPermissionOptions} options The permissions which you are requesting.\n * @returns {Promise<boolean>} A Promise which resolves to `true` if the permission was accepted.\n */\nexports.requestPermission = function (options) {\n    return permissions.requestPermission(options);\n};\n/**\n * Gets the current permission status.\n *\n * @returns {Promise<LocationPermissionStatus>} The current permission status.\n */\nexports.getCurrentPermission = function () {\n    return permissions.getCurrentPermission();\n};\n/**\n * Checks that the current location permission matches the given options.\n *\n * @param {RequestPermissionOptions} options The permissions which you are checking.\n * @returns {Promise<boolean>} If the current location permissions match the given options.\n */\nexports.checkPermission = function (options) {\n    return permissions.checkPermission(options);\n};\n/**\n * Monitor the permission status for changes.\n *\n * @param {LocationPermissionStatusCallback} listener The listener which will be called when the permission status changes.\n * @returns {Subscription} The subscription function which can be used to unsubscribe.\n */\nexports.subscribeToPermissionUpdates = function (listener) {\n    return permissions.subscribeToPermissionUpdates(listener);\n};\n/**\n * Subscribe to location changes with the given listener. Ensure you have the correct permission before calling this method. The location provider will respect the settings you have given it.\n *\n * @param  {LocationCallback} listener The listener which will be called when the user location changes.\n * @returns {Subscription} The subscription function which can be used to unsubscribe.\n */\nexports.subscribeToLocationUpdates = function (listener) {\n    return subscriptions.subscribeToLocationUpdates(listener);\n};\n/**\n * Get the latest location. Ensure you have the correct permission before calling this method.\n *\n * This will subscribe to location events for you at the unsubscribe when it gets its first valid location. Usually, this method will return very fast with a possibly out of date location, however, in some circumstances it will not return a location. Therefore, this method has a timeout after which the promise will be resovled with `null` value.\n *\n * The location provider will respect the settings you have given it, so if you need a location with a certain accuracy, ensure you call `RNLocation.configure` first. If you want *any* location then ensure you call `RNLocation.configure` with no distance filter.\n *\n * @param {GetLatestLocationOptions} options The options to use when getting the location.\n * @returns {Promise<Location | null>} A Promise which will resolve to the latest location, or to `null` if the timeout is reached.\n */\nexports.getLatestLocation = function (options) {\n    if (options === void 0) { options = {}; }\n    var locationPromise = new Promise(function (resolve) {\n        var unsubscribe = subscriptions.subscribeToLocationUpdates(function (locations) {\n            if (locations.length === 0) {\n                return;\n            }\n            // Sort the locations with the most recent first\n            var sortedLocations = locations.sort(function (a, b) { return b.timestamp - a.timestamp; });\n            // Unsubscribe from future updates\n            if (unsubscribe) {\n                unsubscribe();\n            }\n            // Resolve the promise with the latest location\n            resolve(sortedLocations[0]);\n        });\n    });\n    // The user has explicitly turned off the timeout so return the promise directly\n    if (options.timeout === null) {\n        return locationPromise;\n    }\n    // Setup the timeout with a default value if one was not supplied\n    var timeout = options.timeout || 10000;\n    return utils_1.promiseTimeoutResolveNull(timeout, locationPromise);\n};\n/**\n * Subscribe to heading changes with the given listener. Ensure you have the correct permission before calling this method. The location provider will respect the settings you have given it.\n *\n * @param  {LocationCallback} listener The listener which will be called when the heading changes.\n * @returns {Subscription} The subscription function which can be used to unsubscribe.\n */\nexports.subscribeToHeadingUpdates = function (listener) {\n    return subscriptions.subscribeToHeadingUpdates(listener);\n};\n/**\n * Subscribe to significant updates to the users location with the given listener.\n *\n * **This method does not take into account the {@link distanceFilter} which you configured RNLocation with**.\n *\n * In most cases, you should call {@link configure} with the correct settings and then use {@link subscribeToLocationUpdates} to subscribe to the location updates. For more details, take a look at [Apple's documentation](https://developer.apple.com/documentation/corelocation/cllocationmanager/1423531-startmonitoringsignificantlocati?language=objc).\n *\n * @param  {LocationCallback} listener The listener which will be called when the user location significantly changes.\n * @returns {Subscription} The subscription function which can be used to unsubscribe.\n */\nexports.subscribeToSignificantLocationUpdates = function (listener) {\n    return subscriptions.subscribeToSignificantLocationUpdates(listener);\n};\nexports.default = {\n    configure: exports.configure,\n    requestPermission: exports.requestPermission,\n    checkPermission: exports.checkPermission,\n    getCurrentPermission: exports.getCurrentPermission,\n    subscribeToPermissionUpdates: exports.subscribeToPermissionUpdates,\n    subscribeToLocationUpdates: exports.subscribeToLocationUpdates,\n    getLatestLocation: exports.getLatestLocation,\n    subscribeToHeadingUpdates: exports.subscribeToHeadingUpdates,\n    subscribeToSignificantLocationUpdates: exports.subscribeToSignificantLocationUpdates,\n    // Internal use only\n    _configureHelpers: exports._configureHelpers,\n    _nativeInterface: nativeInterface,\n    _eventEmitter: eventEmitter\n};\n/**\n * @callback LocationPermissionStatusCallback\n * @param {LocationPermissionStatus} status The new permission status.\n */\n/**\n * @callback LocationCallback\n * @param {Location} location The new user location.\n */\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}